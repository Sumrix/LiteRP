name: Build and Upload Release

on:
  push:
    tags:
      - "v[0-9]+.[0-9]+.[0-9]+"
      - "v[0-9]+.[0-9]+.[0-9]+-*"

run-name: Build & Release ${{ github.ref_name }}

env:
  DOTNET_VERSION: '9.0.x'
  CONFIGURATION: 'Release'

permissions:
  contents: write

jobs:
  build:
    name: Build (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: windows-latest
            rid: win-x64
            tfm: net9.0-windows
          - os: ubuntu-latest
            rid: linux-x64
            tfm: net9.0
          - os: macos-latest
            rid: osx-x64
            tfm: net9.0

    steps:
    - name: Parse version
      id: version
      shell: bash
      run: |
        NUMERIC=$(echo "${{ github.ref_name }}" | sed -E 's/^v//; s/-.*//')
        SEMVER=$(echo "${{ github.ref_name }}" | sed 's/^v//')
        echo "numeric=$NUMERIC" >> "$GITHUB_OUTPUT"
        echo "semver=$SEMVER"   >> "$GITHUB_OUTPUT"

    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        cache: true
        cache-dependency-path: src/LiteRP.WebApp/packages.lock.json

    - name: Cache Tailwind CLI
      uses: actions/cache@v3
      with:
        path: src/LiteRP.WebApp/obj/tailwind-cli
        key: tailwind-cli-v3.4.17-${{ runner.os }}
        
    # Build once to let Tailwind generate app.min.css,
    # then publish (which rebuilds + packages, now with the CSS embedded)
    - name: Build
      run: >
        dotnet build src/LiteRP.WebApp/LiteRP.WebApp.csproj
        -c ${{ env.CONFIGURATION }}
        -f ${{ matrix.tfm }}
        
    - name: Publish
      run: >
        dotnet publish src/LiteRP.WebApp/LiteRP.WebApp.csproj
        -c ${{ env.CONFIGURATION }}
        -f ${{ matrix.tfm }}
        -r ${{ matrix.rid }}
        -o ./publish
        -p:AssemblyVersion=${{ steps.version.outputs.numeric }}
        -p:Version=${{ steps.version.outputs.semver }}
        -p:DebugType=none
        -p:DebuggerSupport=false
        
    - name: Rename artifact (Windows)
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        $exe = Get-ChildItem -Path publish -Filter *.exe | Select-Object -First 1
        if (-not $exe) { throw "No .exe produced in ./publish" }
        Move-Item $exe.FullName "LiteRP-${{ matrix.rid }}.exe"

    - name: Rename artifact (Linux/macOS)
      if: runner.os != 'Windows'
      shell: bash
      run: |
        BIN=$(find publish -maxdepth 1 -type f -perm -111 | head -n1)
        if [ -z "$BIN" ]; then
          BIN=$(find publish -maxdepth 1 -type f | head -n1)
        fi
        [ -z "$BIN" ] && { echo "No binary produced in ./publish"; exit 1; }
        mv "$BIN" "LiteRP-${{ matrix.rid }}"
        chmod +x "LiteRP-${{ matrix.rid }}"

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: binaries-${{ matrix.rid }}
        path: |
          LiteRP-${{ matrix.rid }}*
        if-no-files-found: error

  release:
    name: Draft GitHub Release
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate changelog
        uses: orhun/git-cliff-action@v4
        with:
          config: .github/cliff.toml
          args: --latest
        env:
          OUTPUT: CHANGELOG.md
          GITHUB_REPO: ${{ github.repository }}

      - uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: "LiteRP ${{ github.ref_name }}"
          draft: false
          prerelease: ${{ contains(github.ref, '-') }}
          body_path: CHANGELOG.md
          files: artifacts/*/*

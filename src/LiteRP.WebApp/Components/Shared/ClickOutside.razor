@implements IDisposable

@inject IElementClickObserverService ObserverService

<div @ref="_elementRef" class="@Class" @attributes="AdditionalAttributes">
    @ChildContent
</div>

@code {
    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    /// <summary>
    /// Fires when a click is detected outside the component's boundaries.
    /// </summary>
    [Parameter]
    public EventCallback OnClickOutside { get; set; }

    [Parameter]
    public string? Class { get; set; }

    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object>? AdditionalAttributes { get; set; }

    private ElementReference _elementRef;
    private Guid _subscriptionId;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _subscriptionId = await ObserverService.Subscribe(_elementRef, HandleClickOutside);
        }
    }

    private void HandleClickOutside()
    {
        OnClickOutside.InvokeAsync();
    }

    public void Dispose()
    {
        ObserverService.Unsubscribe(_subscriptionId);
    }
}
@using LiteRP.WebApp.Components.Icons
@using LiteRP.WebApp.Components.Organisms.SidenavComponent
@inject IChatSessionService ChatSessionService
@inject ICharacterService CharacterService
@inject ILogger<SidenavLayout> Logger

<Sidenav @ref="_sidenav">
    <SidenavHeader>
        <a href="/" class="flex items-center ps-2.5">
            <img class="h-8 me-3" src="img/logo-128.png" alt="LiteRP Logo" />
            <span class="self-center text-xl font-semibold whitespace-nowrap dark:text-white">LiteRP</span>
        </a>
    </SidenavHeader>

    <SidenavBody>
        <SidenavGroup>
            <SidenavItem Href="/characters" Text="Characters" Icon="new UsersIcon()" />
            <SidenavItem Href="/settings" Text="Settings" Icon="new GearIcon()" />
            @* <SidenavItem Href="/buttons" Text="Buttons" />
            <SidenavItem Href="/alerts" Text="Alerts" /> *@
        </SidenavGroup>

        <SidenavGroup Title="Chats" IsTopBordered="true">
            @if (_displayedChats is null)
            {
                <p class="px-2 text-gray-400">Loading chats...</p>
            }
            else
            {
                if (_newChat != null)
                {
                    <SidenavChatItem Chat="_newChat" IsNew="true" />
                }

                @foreach (var chat in _displayedChats)
                {
                    <SidenavChatItem Chat="@chat" />
                }

                if (!_loadedLastChats)
                {
                    <li class="px-2">
                        <button @onclick="LoadMoreChats"
                                class="w-full p-2 text-sm text-primary-600 dark:text-primary-500 hover:underline">
                            Load More
                        </button>
                    </li>
                }
            }
        </SidenavGroup>
    </SidenavBody>

    <SidenavFooter>
        <DarkMode />
        @* <CultureToggle/> *@
    </SidenavFooter>
</Sidenav>

@code {
    public string Id => _sidenav.Id;

    private List<ChatSummary>? _displayedChats;
    private ChatSummary? _newChat;
    private const int PageSize = 10;
    private Sidenav _sidenav = null!;
    private bool _loadedLastChats = false;

    protected override async Task OnInitializedAsync()
    {
        // First subscribe, in case something will change during the first load
        ChatSessionService.OnChange += () => HandleChatSessionsChange().CatchAndLog();
        _displayedChats = await LoadChatSummaries(0);
    }

    private async Task<List<ChatSummary>> LoadChatSummaries(int skip)
    {
        var list = new List<ChatSummary>();
        var sessionMetadataList = await ChatSessionService.GetSessionMetadataListAsync(skip, PageSize);

        foreach (var metadata in sessionMetadataList)
        {
            list.Add(await ToChatSummary(metadata));
        }

        if (list.Count < PageSize)
        {
            _loadedLastChats = true;
        }

        return list;
    }

    private async Task HandleChatSessionsChange()
    {
        try
        {
            _displayedChats = await LoadChatSummaries(0);

            var newSession = ChatSessionService.NewSession;
            if (newSession != null)
            {
                _newChat = await ToChatSummary(newSession);
            }
            else
            {
                _newChat = null;
            }

            await InvokeAsync(StateHasChanged);
        }
        catch (Exception e)
        {
            Logger.LogError(e, "Error during chat sessions loading");
        }
    }

    private async Task LoadMoreChats()
    {
        if (_displayedChats is null) return;
        var moreChats = await LoadChatSummaries(_displayedChats.Count);
        _displayedChats.AddRange(moreChats);
    }

    public async Task ToggleDrawerAsync() => await _sidenav.ToggleDrawerAsync();

    private async Task<ChatSummary> ToChatSummary(ChatSessionMetadata metadata)
    {
        var character = await CharacterService.GetCharacterAsync(metadata.CharacterId)
            ?? throw new InvalidOperationException($"The character {metadata.CharacterId} not found");

        return new ChatSummary
        {
            Id = metadata.Id,
            Character = character,
            LastMessage = metadata.LastMessage,
            Timestamp = DateTime.Now - metadata.LastModified
        };
    }
}